from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import sqlite3

from telegram import ReplyKeyboardMarkup

# SETTING UP DATABASES
conn = sqlite3.connect("users.sqlite")
cur = conn.cursor()

cur.execute('''CREATE TABLE IF NOT EXISTS Users (
    id INTEGER NOT NULL PRIMARY KEY UNIQUE,
    name TEXT,
    lastName TEXT,
    lang
)''')
conn.commit()


# PRE-BUILT INPUTS
hi_eng = ["hi", "hello", "what's up?", "what is up", "what's up", "what is up?", "hello there", "sup", "whassup", "wha sup", "hi there", "hey"]
hi_ukr = ["–ø—Ä–∏–≤—ñ—Ç", "—Ö–µ–π", "–¥–æ–±—Ä–∏–π –¥–µ–Ω—å"]
hi_ru = ["–ø—Ä–∏–≤–µ—Ç", "—Ö–µ–π", "—Ö–∞–π", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å"]

# SETTING UP THE BOT
API_TOKEN = '5108593896:AAFrhYyfeqXLolGlyzOqNgxysSJwfg578-0'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


# LANGUAGE BUTTONS
english = InlineKeyboardButton(text="üá∫üá∏Englishüá∫üá∏", callback_data="eng")
ukrainian = InlineKeyboardButton(text="üá∫üá¶–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞üá∫üá¶", callback_data="ukr")
ru = InlineKeyboardButton(text="—Ä—É—Å—Å–∫–∏–π", callback_data="ru")
langKeyboard = InlineKeyboardMarkup().add(english).add(ukrainian).add(ru)

# GET BACK BUTTON
gbeng = InlineKeyboardButton(text="‚¨ÖÔ∏èGo Back", callback_data="gback")
gbukr = InlineKeyboardButton(text="‚¨ÖÔ∏è–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", callback_data="gback")
gbru = InlineKeyboardButton(text="‚¨ÖÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="gback")

# BOOK COMMAND BUTTONS
indeng = InlineKeyboardButton(text="üôã‚Äç‚ôÇÔ∏èIndividual Class", callback_data="ind")
groupeng = InlineKeyboardButton(text="üë®‚Äçüë©‚Äçüëß‚Äçüë¶Group class", callback_data="group")
minigroupeng = InlineKeyboardButton(text="üë®‚Äçüë©‚Äçüëß‚Äçüë¶Mini Group class", callback_data="mini-group")
speakingeng = InlineKeyboardButton(text="üó£Speaking class", callback_data="speaking")
optionseng = InlineKeyboardMarkup().add(indeng).add(groupeng).add(minigroupeng).add(speakingeng).add(gbeng)

indukr = InlineKeyboardButton(text="üôã‚Äç‚ôÇÔ∏è–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π —É—Ä–æ–∫", callback_data="ind")
groupukr = InlineKeyboardButton(text="üë®‚Äçüë©‚Äçüëß‚Äçüë¶–ì—Ä—É–ø–æ–≤–∏–π —É—Ä–æ–∫", callback_data="group")
minigroupukr = InlineKeyboardButton(text="üë®‚Äçüë©‚Äçüëß‚Äçüë¶–ú—ñ–Ω—ñ –ì—Ä—É–ø–æ–≤–∏–π —É—Ä–æ–∫", callback_data="mini-group")
speakingukr = InlineKeyboardButton(text='"üó£Speaking" —É—Ä–æ–∫', callback_data="speaking")
optionsukr = InlineKeyboardMarkup().add(indukr).add(groupukr).add(minigroupukr).add(speakingukr).add(gbukr)

indru = InlineKeyboardButton(text="üôã‚Äç‚ôÇÔ∏è–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —É—Ä–æ–∫", callback_data="ind")
groupru = InlineKeyboardButton(text="üë®‚Äçüë©‚Äçüëß‚Äçüë¶–ì—Ä—É–ø–ø–æ–≤–æ–π —É—Ä–æ–∫", callback_data="group")
minigroupru = InlineKeyboardButton(text="üë®‚Äçüë©‚Äçüëß‚Äçüë¶–ú–∏–Ω–∏ –ì—Ä—É–ø–æ–≤–∏–π —É—Ä–æ–∫", callback_data="mini-group")
speakingru = InlineKeyboardButton(text='"üó£Speaking" —É—Ä–æ–∫', callback_data="speaking")
optionsru = InlineKeyboardMarkup().add(indru).add(groupru).add(minigroupru).add(speakingru).add(gbru)




# START COMMAND
@dp.message_handler(commands=["start"])
async def welcome(message: types.Message):

    try:
        cur.execute('''SELECT lang FROM Users WHERE id = ?''', (message.from_user.id,))
        global lang
        lang = cur.fetchone()[0]
    except:
        await message.answer(f"Hello {message.from_user.first_name}!\nI'm Your English Bro Bot ü§ñ\nWhat's up? \nFor starters /help")

    if lang == "eng":
        await message.answer(f"Hello {message.from_user.first_name}!\nI'm Your English Bro Bot ü§ñ\nWhat's up? \nFor starters type /help")
    elif lang == "ukr":
        await message.answer(f"–ü—Ä–∏–≤—ñ—Ç {message.from_user.first_name}!\n–Ø —Ç–≤—ñ–π English Bro Bot ü§ñ \n–Ø–∫ —Å—è –º–∞—î—à? \n–î–ª—è –ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥–∏ /help")
    elif lang == "ru":
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!\n–Ø —Ç–≤–æ–π English Bro Bot ü§ñ\n–ö–∞–∫ –¥–µ–ª–∞? \n–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /help")


    cur.execute('''INSERT OR IGNORE INTO Users (id,name, lastName)
        VALUES (?,?,?)''',(message.from_user.id, message.from_user.first_name, message.from_user.last_name))
    conn.commit()

# LANG COMMAND
@dp.message_handler(commands=["lang"])
async def lang(message: types.Message):
    await message.answer(responses("lang_command", message.from_user.id), reply_markup=langKeyboard)

# MANAGING LANGUAGES
@dp.callback_query_handler(text=["eng", "ukr", "ru"])
async def changeLang(call: types.CallbackQuery):
    if call.data == "eng":
        await call.message.delete()
        await call.message.answer("Agreed!")
    elif call.data == "ukr":
        await call.message.delete()
        await call.message.answer("–î–æ–º–æ–≤–∏–ª–∏—Å—å!")
    elif call.data == "ru":
        await call.message.delete()
        await call.message.answer("–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å!")

    cur.execute('''INSERT OR REPLACE INTO Users (id, name, lastName, lang)
        VALUES (?,?,?,?)''', (call.from_user.id,call.from_user.first_name, call.from_user.last_name, call.data))
    conn.commit()

# HELP COMMAND
@dp.message_handler(commands=["help"])
async def welcome(message: types.Message):
    await message.answer(responses("help_command", message.from_user.id))

# ABOUT COMMAND
@dp.message_handler(commands=["about"])
async def about(message: types.Message):
    await message.answer(responses("about_command",message.from_user.id))

# CONTACT COMMAND
@dp.message_handler(commands=["contact"])
async def contact(message: types.Message):
    await message.answer(responses("contact_command", message.from_user.id))

# BOOK COMMAND
@dp.message_handler(commands=["book"])
async def book(message: types.Message):
    await message.answer(responses("book_command", message.from_user.id),reply_markup=optionsKeyboard(message.from_user.id))

# MANAGING BOOK OPTIONS
@dp.callback_query_handler(text=["gback","ind","group","mini-group","speaking"])
async def manage_options(call: types.CallbackQuery):
    if call.data == "gback":
        await call.message.delete()
    elif call.data == "ind":
        await call.message.delete()
        await call.message.answer(responses("ind_classes", call.from_user.id))
    elif call.data == "group":
        await call.message.delete()
        await call.message.answer(responses("group_classes", call.from_user.id))
    elif call.data == "speaking":
        await call.message.delete()
        await call.message.answer(responses("speaking_classes", call.from_user.id))

# CANCEL COMMAND
@dp.message_handler(commands=["cancel"])
async def cancel(message: types.Message):
    await message.answer(responses("cancel_command", message.from_user.id))

# ABOUT CLASS INFO
@dp.message_handler(commands=["lessoninfo"])
async def lessoninfo(message: types.Message):
    await message.answer(responses("lessoninfo_command", message.from_user.id), reply_markup=optionsKeyboard(message.from_user.id))

# MANAGING CLASS INFO BUTTONS
@dp.callback_query_handler(text=["gback","ind","group","mini-group","speaking"])
async def manage_classinfo(call: types.CallbackQuery):
    if call.data == "gback":
        await call.message.delete()
    elif call.data == "ind":
        await call.message.delete()
        await call.message.answer(responses("indinfo", call.from_user.id))
    elif call.data == "group":
        await call.message.delete()
        await call.message.answer(responses("groupinfo", call.from_user.id))
    elif call.data == "mini-group":
        await call.message.delete()
        await call.message.answer(responses("mini-groupinfo", call.from_user.id))
    elif call.data == "speaking":
        await call.message.delete()
        await call.message.answer(responses("speakinginfo", call.from_user.id))

# MANAGING REGULAR MESSAGES
@dp.message_handler()
async def messages(message: types.Message):
    await message.answer(responses(message.text, message.from_user.id))

def responses(command, id):
    cur.execute('''SELECT lang FROM Users WHERE id = ?''',(id,))
    lang = cur.fetchone()[0]

    if str(command) == "help_command":
        if lang == "eng":
            return "This is the list of all commands: \n/start - Start the bot \n/about - Get to know the teacher better \n/lang - Select your language \n/contact - Contact the teacher \n/book - Book a class \n/cancel Cancel a class \n/help - Get the list of all commands \n------------------------------------------------------------- \nIf this is not something you're looking for, please contact the teacher directly: \n/contact"
        elif lang == "ukr":
            return "–¶–µ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∫–æ–º–∞–Ω–¥: \n/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ \n/about - –î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –≤—á–∏—Ç–µ–ª—è \n/lang - –í–∏–±–µ—Ä–∏ —Å–≤–æ—é –º–æ–≤—É \n/contact - –ó–≤'—è–∂–∏—Å—å –∑ –≤—á–∏—Ç–µ–ª–µ–º \n/book - –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —É—Ä–æ–∫ \n/cancel - –°–∫–∞—Å—É–≤–∞—Ç–∏ —É—Ä–æ–∫ \n/help - –û—Ç—Ä–∏–º–∞–π —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∫–æ–º–∞–Ω–¥ \n------------------------------------------------------------- \n–Ø–∫—â–æ —Ü–µ –Ω–µ —Ç–µ, —â–æ —Ç–∏ —à—É–∫–∞—î—à, –∑–≤–µ—Ä–Ω–∏—Å—å –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –¥–æ –≤—á–∏—Ç–µ–ª—è: \n/contact"
        elif lang == "ru":
            return "–≠—Ç–æ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥: \n/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ \n/about - –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ —É—á–∏—Ç–µ–ª—è \n/lang - –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ \n/contact - –°–≤—è–∑–∞—Ç—å—Å—è —Å —É—á–∏—Ç–µ–ª–µ–º \n/book - –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫ \n/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —É—Ä–æ–∫ \n/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ \n-------------------------------------------------------------- \n–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–æ, —á—Ç–æ —Ç—ã –∏—â–µ—à—å, —Å–≤—è–∂–∏—Å—å –Ω–∞–ø—Ä—è–º—É—é —Å —É—á–∏—Ç–µ–ª–µ–º: \n/contact"
        else:
            return "This is the list of all commands: \n/start - Start the bot \n/about - Get to know the teacher better \n/lang - Select your language \n/contact - Contact the teacher \n/book - Book a class \n/cancel Cancel a class \n/help - Get the list of all commands \n------------------------------------------------------------- \nIf this is not something you're looking for, please contact the teacher directly: \n/contact"

    elif str(command) == "lang_command":
        if lang == "eng":
            return "Select your language"
        elif lang == "ukr":
            return "–í–∏–±–µ—Ä–∏ —Å–≤–æ—é –º–æ–≤—É"
        elif lang == "ru":
            return "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —è–∑—ã–∫"
        else:
            return "Select your language"


    elif str(command) == "contact_command":
        if lang == "eng":
            return "üì∑Instagram: \nhttps://instagram.com/your_english_bro?igshid=YmMyMTA2M2Y= \n------------------------------------------------------------- \nüìûPhone number: +380951775440"
        elif lang == "ukr":
            return "üì∑Instagram: \nhttps://instagram.com/your_english_bro?igshid=YmMyMTA2M2Y= \n------------------------------------------------------------- \nüìû–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: +380951775440"
        elif lang == "ru":
            return "üì∑Instagram: \nhttps://instagram.com/your_english_bro?igshid=YmMyMTA2M2Y= \n------------------------------------------------------------- \nüìû–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +380951775440"
        else:
            return "üì∑Instagram: \nhttps://instagram.com/your_english_bro?igshid=YmMyMTA2M2Y= \n------------------------------------------------------------- \nüìûPhone number: +380951775440"

    elif str(command) == "cancel_command":
        if lang == "eng":
            return "If you want to cancel a class, please contact the teacher directly: \n+380951775440"
        elif lang == "ukr":
            return "–Ø–∫—â–æ —Ç—ã —Ö–æ—á–µ—à —Å–∫–∞—Å—É–≤–∞—Ç–∏ —É—Ä–æ–∫, –∑–≤–µ—Ä–Ω–∏—Å—å –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –¥–æ –≤—á–∏—Ç–µ–ª—è: \n+380951775440"
        elif lang == "ru":
            return "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ, —Å–≤—è–∂–∏—Å—å —Å —É—á–∏—Ç–µ–ª–µ–º –Ω–∞–ø—Ä—è–º—É—é: \n+380951775440"
        else:
            return "If you want to cancel a class, please contact the teacher directly: \n+380951775440"


    elif str(command) == "book_command":
        if lang == "eng":
            return "These are the options you can choose from"
        elif lang == "ukr":
            return "–¶–µ –≤–∞—Ä—ñ–∞–Ω—Ç–∏, —è–∫—ñ —Ç–∏ –º–æ–∂–µ—à –≤–∏–±—Ä–∞—Ç–∏"
        elif lang == "ru":
            return "–≠—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å"
        else:
            return "These are the options you can choose from"

    elif str(command) == "ind_classes":
        if lang == "eng":
            return "To book an individual class, please contact the teacher directly via Telegram, phone call, or Instagram \n/contact"
        elif lang == "ukr":
            return "–©–æ–± –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π —É—Ä–æ–∫, –∑–≤‚Äô—è–∂–∏—Å—å –∑ –≤—á–∏—Ç–µ–ª–µ–º –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ —á–µ—Ä–µ–∑ Telegram, —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –¥–∑–≤—ñ–Ω–æ–∫ –∞–±–æ Instagram \n/contact"
        elif lang == "ru":
            return "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —É—Ä–æ–∫, —Å–≤—è–∂–∏—Å—å —Å —É—á–∏—Ç–µ–ª–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram, –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ –≤ Instagram \n/contact"
        else: 
            return "To book an individual class, please contact the teacher directly via Telegram, phone call, or Instagram \n/contact"

    elif str(command) == "group_classes":
        if lang == "eng":
            return "I'm sorry... This command doesn't work for now :("
        elif lang == "ukr":
            return "–í–∏–±–∞—á—Ç–µ... –¶—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞—Ä–∞–∑ –Ω–µ –ø—Ä–∞—Ü—é—î :("
        elif lang == "ru":
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ... –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç :("
        else: 
            return "I'm sorry... This command doesn't work for now :("

    elif str(command) == "lessoninfo_command":
        if lang == "eng":
            return "Select a lesson you want to know more about"
        elif lang == "ukr":
            return "–û–±–µ—Ä–∏ —É—Ä–æ–∫, –ø—Ä–æ —è–∫–∏–π —Ö–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ"
        elif lang == "ru":
            return "–í—ã–±–µ—Ä–∏ —É—Ä–æ–∫, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ"
        else:
            return "Select a lesson you want to know more about"

    elif str(command) == "speaking_classes":
        if lang == "eng":
            return "If you want to attend a speaking class, join this group for further information: \nhttps://t.me/your_english_bro"
        elif lang == "ukr":
            return "–Ø–∫—â–æ —Ç–∏ —Ö–æ—á–µ—à –≤—ñ–¥–≤—ñ–¥–∞—Ç–∏ speaking —É—Ä–æ–∫, –∑–æ—Ö–æ–¥—å –¥–æ —Ü—ñ—î—ó –≥—Ä—É–ø–∏, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é: \nhttps://t.me/your_english_bro"
        elif lang == "ru":
            return "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å speaking —É—Ä–æ–∫, –∑–∞—Ö–æ–¥–∏ –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: \nhttps://t.me/your_english_bro"
        else: 
            return "If you want to attend a speaking class, join this group for further information: \nhttps://t.me/your_english_bro"

    
    elif str(command) == "about_command":
        if lang == "eng":
            return '''My name is Viacheslav aka Your English Bro üòé 

I‚Äôve been teaching for more than 3 years. 
I am Business English teacher üë®‚Äçüè´ in Ukrainian-American Concordia university. 
I‚Äôve completed language courses in Reading, UK üá¨üáß, Exeter, UK üá¨üáß and Toronto, Canada üá®üá¶ 
I have BBA and MBA, so I know something about business as well as economics üíµ 
I have worked as a farmer, a manager, a translator, a trainer, had my own company, but my real passion has always been teaching.

My big goal is to teach as many people as I can to make Ukraine an English speaking country'''
        elif lang == "ukr":
            return '''–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –í‚Äô—è—á–µ—Å–ª–∞–≤, —Ç–∞–∫ —Å–∞–º–æ –≤—ñ–¥–æ–º–∏–π —è–∫ Your English Bro üòé

–í–∏–∫–ª–∞–¥–∞—é –±—ñ–ª—å—à–µ 3 —Ä–æ–∫—ñ–≤.
–Ø –≤–∏–∫–ª–∞–¥–∞—á –¥—ñ–ª–æ–≤–æ—ó –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó üë®‚Äçüè´ –≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ-–∞–º–µ—Ä–∏–∫–∞–Ω—Å—å–∫–æ–º—É —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ –ö–æ–Ω–∫–æ—Ä–¥—ñ—è.
–Ø –∑–∞–∫—ñ–Ω—á–∏–≤ –º–æ–≤–Ω—ñ –∫—É—Ä—Å–∏ –≤ –†–µ–¥—ñ–Ω–≥—É, –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω—ñ—è üá¨üáß, –ï–∫—Å–µ—Ç–µ—Ä, –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω—ñ—è üá¨üáß —Ç–∞ –¢–æ—Ä–æ–Ω—Ç–æ, –ö–∞–Ω–∞–¥–∞ üá®üá¶
–£ –º–µ–Ω–µ —î BBA —Ç–∞ MBA, —Ç–æ–º—É —è –∑–Ω–∞—é –¥–µ—â–æ —è–∫ –ø—Ä–æ –±—ñ–∑–Ω–µ—Å, —Ç–∞–∫ —ñ –ø—Ä–æ –µ–∫–æ–Ω–æ–º—ñ–∫—É üíµ
–Ø –ø—Ä–∞—Ü—é–≤–∞–≤ —Ñ–µ—Ä–º–µ—Ä–æ–º, –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–µ–º, —Ç—Ä–µ–Ω–µ—Ä–æ–º, –º–∞–≤ –≤–ª–∞—Å–Ω—É –∫–æ–º–ø–∞–Ω—ñ—é, –∞–ª–µ –º–æ—î—é —Å–ø—Ä–∞–≤–∂–Ω—å–æ—é –ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç—é –∑–∞–≤–∂–¥–∏ –±—É–ª–æ –Ω–∞–≤—á–∞–Ω–Ω—è.

–ú–æ—è –≤–µ–ª–∏–∫–∞ –º–µ—Ç–∞ ‚Äì –Ω–∞–≤—á–∏—Ç–∏ —è–∫–æ–º–æ–≥–∞ –±—ñ–ª—å—à–µ –ª—é–¥–µ–π –∑—Ä–æ–±–∏—Ç–∏ –£–∫—Ä–∞—ó–Ω—É –∞–Ω–≥–ª–æ–º–æ–≤–Ω–æ—é –∫—Ä–∞—ó–Ω–æ—é'''
        elif lang == "ru":
            return '''–ú–µ–Ω—è –∑–æ–≤—É—Ç –í—è—á–µ—Å–ª–∞–≤, —Ç–∞–∫ –∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–∫ Your English Bro üòé

–ü—Ä–µ–ø–æ–¥–∞—é –±–æ–ª–µ–µ 3-—Ö –ª–µ—Ç.
–Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –¥–µ–ª–æ–≤–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ üë®‚Äçüè´ –≤ —É–∫—Ä–∞–∏–Ω—Å–∫–æ-–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –ö–æ–Ω–∫–æ—Ä–¥–∏—è.
–Ø –ø—Ä–æ—à–ª–∞ —è–∑—ã–∫–æ–≤—ã–µ –∫—É—Ä—Å—ã –≤ –†–µ–¥–∏–Ω–≥–µ, –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è üá¨üáß, –≠–∫—Å–µ—Ç–µ—Ä–µ, –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è üá∑üáß –∏ –¢–æ—Ä–æ–Ω—Ç–æ, –ö–∞–Ω–∞–¥–∞ üá®üá¶
–£ –º–µ–Ω—è –µ—Å—Ç—å BBA –∏ MBA, —Ç–∞–∫ —á—Ç–æ —è –∑–Ω–∞—é –∫–æ–µ-—á—Ç–æ –æ –±–∏–∑–Ω–µ—Å–µ, –∞ —Ç–∞–∫–∂–µ —ç–∫–æ–Ω–æ–º–∏–∫–µ üíµ
–Ø —Ä–∞–±–æ—Ç–∞–ª —Ñ–µ—Ä–º–µ—Ä–æ–º, –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º, —Ç—Ä–µ–Ω–µ—Ä–æ–º, –∏–º–µ–ª —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é, –Ω–æ –º–æ–µ–π –Ω–∞—Å—Ç–æ—è—â–µ–π —Å—Ç—Ä–∞—Å—Ç—å—é –≤—Å–µ–≥–¥–∞ –±—ã–ª–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏–µ.

–ú–æ—è –±–æ–ª—å—à–∞—è —Ü–µ–ª—å ‚Äî –Ω–∞—É—á–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –ª—é–¥–µ–π —Å–¥–µ–ª–∞—Ç—å –£–∫—Ä–∞–∏–Ω—É –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–æ–π.'''
        else:
            return '''My name is Viacheslav aka Your English Bro üòé 

I‚Äôve been teaching for more than 3 years. 
I am Business English teacher üë®‚Äçüè´ in Ukrainian-American Concordia university. 
I‚Äôve completed language courses in Reading, UK üá¨üáß, Exeter, UK üá¨üáß and Toronto, Canada üá®üá¶ 
I have BBA and MBA, so I know something about business as well as economics üíµ 
I have worked as a farmer, a manager, a translator, a trainer, had my own company, but my real passion has always been teaching.

My big goal is to teach as many people as I can to make Ukraine an English speaking country'''
    else:
        if str(command).lower() in hi_eng:
            return "Hello there!"
        elif str(command).lower() in hi_ukr:
            return "–ü—Ä–∏–≤—ñ—Ç!"
        elif str(command).lower() in hi_ru:
            return '–ü—Ä–∏–≤–µ—Ç!'
        else:
            if lang == "eng":
                return "I'm sorry... I don't understand what you mean :("
            elif lang == "ukr":
                return "–í–∏–±–∞—á—Ç–µ... —è –Ω–µ —Ä–æ–∑—É–º—ñ—é —â–æ –≤–∏ –º–∞—î—Ç–µ –Ω–∞ —É–≤–∞–∑—ñ :("
            elif lang == "ru":
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ... —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤–≤–∏–¥—É :("
            else:
                return "I'm sorry... I don't understand what you mean :("

def optionsKeyboard(id):
    cur.execute('''SELECT lang FROM Users WHERE id = ?''', (id,))
    lang = cur.fetchone()[0]

    if lang == "eng":
        return optionseng
    elif lang == "ukr":
        return optionsukr
    elif lang == "ru":
        return optionsru
    else:
        return optionseng

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)